---
title: "analysis_Global Fertility Rate"
author: "karina"
theme: style/article.scss
code-fold: true
---

```{r}
library(tidyverse)
library(plotly)
library(here)
library(readr)
library(ggplot2)
library(themes360info)
library(dplyr)
```

\

# Number of births

```{r, Number of births,echo=FALSE,warning=FALSE}
# fertility_number <- read_csv(here("data", "fertilityrate_prosperity.csv"))
fertility_develop <- read_csv(here("data", "fertility_development.csv"))
country <-read_csv(here("data", "fertilityrate_prosperity.csv"))


```

```{r}
library(plotly)
library(quantmod)
fertility_rate_total <- read_csv(here("data", "fertility_rate_total.csv"))

fertility_rate_total <-fertility_rate_total %>% pivot_longer(cols=everything(),names_to = "Years", values_to = "Number")


 
# fertility_rate_total$Years <- as.numeric()
# fertility_rate_total <- as.numeric(fertility_rate_total(Years))
fertility_rate_total$Years <- as.double(fertility_rate_total$Years)  


# df <- data.frame(Date=index(AAPL),coredata(AAPL)) #把index变成数据内容
# df1 <- tail(df, 30)
# #截取最后三十个
# df1$ID <- seq.int(nrow(df1))
# #在最后一列加上id，按照行数

accumulate_by <- function(dat, var) {
  var <- lazyeval::f_eval(var, dat)
  lvls <- plotly:::getLevels(var)
  dats <- lapply(seq_along(lvls), function(x) {
    cbind(dat[var %in% lvls[seq(1, x)], ], frame = lvls[[x]])
  })
  dplyr::bind_rows(dats)
}

f_r<-fertility_rate_total %>%
  accumulate_by(~Years) 

plot_f_r <- ggplot(f_r,aes(x=Years,y= Number,frame=frame)) +
  geom_line()+
  labs(title = "World average female births",
        subtitle = "Plot of length by dose",
        caption = "Data source: ToothGrowth")+
  theme_360()
  
 

plot_f_r

fig <- ggplotly(plot_f_r) %>%
  # layout(
  #   title = "World Total Fertility (live births per woman):1955-2020",
  #   yaxis = list(
  #     title = "Live births per woman",
  #     zeroline = F,
  #     tickprefix = "$"
  #   ),
  #   xaxis = list(
  #     # title = "Year",
  #     zeroline = F, 
  #     showgrid = F
  #   )
  # ) %>% 
  animation_opts(
    frame = 100, 
    transition = 0, 
    redraw = FALSE
  ) %>%
  animation_slider(
    currentvalue = list(
      # prefix = "Year"
    )
  )

fig


```

```{r}
map_world <- map_data('world')

map_world %>% 
  left_join(country, by = c("region" = "Entity")) -> population
 write_csv(x = population, "C:/Users/surfacepro/Desktop/population.csv")
 mp1 <- ggplot(population, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill= Population), colour = Population) +
  scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
  scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
  scale_fill_gradient(low = "lightblue", high="steel blue") +
  labs(title="Best Actors Around the World",
       y="Latitude", x="Longitude",
       subtitle = "The plot picks 10 countries in different continents,
and shows actors that have highest average movie ratings in those countries.\n"
       ) +
  theme_light() 

mp1
```

```{r}
yield_graph1 = plot_geo(country,
                      locationmode = 'worldwide',
                      frame = ~Year) %>% 
  add_trace(locations = ~Code,
            z=~Population,
            zmin = 0,
            zmax = max(country$Population),
            color = ~Population)
yield_graph1
```

```{r, world fertility rate map}
library(tmap)    # for static and interactive maps
library(leaflet) # for interactive maps
```

```{r,figm, fig.show="hold", fig.cap= "The changes of cereal production across different countries from 2002 to 2017"}
yield_graph = plot_geo(country,
                      locationmode = 'worldwide',
                      frame = ~Year) %>% 
  add_trace(locations = ~Code,
            z=~Estimates,
            zmin = 0,
            zmax = max(country$Estimates),
            color = ~Estimates)
yield_graph







```

```{r,}
library(sf)
country1 <-country %>% select(Entity,Code) 
  country1 <- country1[!duplicated(country1, fromLast=TRUE), ] 
  laws <- read_csv(here("data", "laws.csv"))
    laws_jingwei <- read_csv(here("data", "laws_jingwei.csv"))
Abortion_Laws <- read_csv(here("data", "lawsmap.csv"))
  laws <- left_join(Abortion_Laws,country1,by="Entity") %>%
    select(Entity,pop2022,laws,number,Code)
 # write_csv(x = laws, "C:/Users/surfacepro/Desktop/laws.csv") 
 #
library(rnaturalearth)
world <- ne_countries(returnclass = "sf")
class(world)
#> [1] "sf"    "data.frame"
plot_ly(world, color = I("gray90"), stroke = I("black"), span = I(1))
 
library(sf)
world %>%
  select(name) %>%
  print(n = 4)

 laws1 <- left_join(laws,laws_jingwei,by="Entity") %>% 
   select(-Code.y)
  


```

```{r}
yield_graph1 = 
yield_graph1
```

```{r}
vic.plot<-ggplot(laws1,aes(geometry = laws,fill = nclient,data_id=postcode_2016,tooltip=label)) +
  geom_sf_interactive(colour = "white",size = 0.2) +
  scale_fill_viridis_c(direction = -1) +
  theme_minimal() +
  theme(axis.ticks.x = element_blank(),
        axis.text.x = element_blank(),
        axis.ticks.y = element_blank(),
        axis.text.y = element_blank(),
        panel.grid = element_blank(),
		plot.title = element_text(face=2,hjust = 0.5,size=rel(1.5)),
        plot.caption.position = "panel",
        plot.caption = element_text(hjust = 0)) +
  labs(fill = "Client Number",
       title = 'Clients in Victoria of Australia') 
```

```{r}
ggplot(laws1, aes( x = Longitude, y = Latitude, group = laws )) +
  geom_polygon(aes(fill = oil_bbl_per_day, color = as.factor(opec_ind))) +
  scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
                       ,values = scales::rescale(c(100,96581,822675,3190373,10000000))
                       ,labels = comma
                       ,breaks = c(100,96581,822675,3190373,10000000)
  ) +
  guides(fill = guide_legend(reverse = T)) +
  labs(fill = 'Barrels per day\n2016'
       ,color = 'OPEC Countries'
       ,title = 'OPEC countries produce roughly 44% of world oil'
       ,x = NULL
       ,y = NULL) +
  theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
        ,plot.title = element_text(size = 28)
        ,plot.subtitle = element_text(size = 14)
        ,axis.ticks = element_blank()
        ,axis.text = element_blank()
        ,panel.grid = element_blank()
        ,panel.background = element_rect(fill = '#333333')
        ,plot.background = element_rect(fill = '#333333')
        ,legend.position = c(.18,.36)
        ,legend.background = element_blank()
        ,legend.key = element_blank()
  ) +
  annotate(geom = 'text'
           ,label = 'Source: U.S. Energy Information Administration\nhttps://en.wikipedia.org/wiki/List_of_countries_by_oil_production\nhttps://en.wikipedia.org/wiki/OPEC'
           ,x = 18, y = -55
           ,size = 3
           ,family = 'Gill Sans'
           ,color = '#CCCCCC'
           ,hjust = 'left'
  ) +
  scale_color_manual(values = c('1' = 'orange', '0' = NA), labels = c('1' = 'OPEC'), breaks = c('1'))
```

```{r}
library(tidyverse)
library(sf)
library(rvest)
library(stringr)
library(scales)
library(viridis)
map_world <- map_data('world')
law2 <- left_join(Abortion_Laws,country1,by="Entity")
map_world %>% 
  left_join(laws, by = c("region" = "Entity")) -> act_world_map

 mp <- ggplot(act_world_map, aes(x = long, y = lat, group = group)) +
  geom_polygon(aes(fill= number), colour = number) +
  scale_x_continuous(breaks = seq(-180, 210, 45), labels = function(x){paste0(x, "°")}) +
  scale_y_continuous(breaks = seq(-60, 100, 30), labels = function(x){paste0(x, "°")}) +
  scale_fill_gradient(low = "lightblue", high="steel blue") +
  labs(title="Best Actors Around the World",
       y="Latitude", x="Longitude",
       subtitle = "The plot picks 10 countries in different continents,
and shows actors that have highest average movie ratings in those countries.\n"
       ) +
  theme_light() 

mp

ggplot(laws1, aes( x = Longitude, y = Latitude, group = laws )) +
  geom_polygon(aes(fill = laws))
```

```{r}
df.oil <- read_html("https://en.wikipedia.org/wiki/List_of_countries_by_oil_production") %>%
  html_nodes("table") %>%
  .[[1]] %>%
  html_table()



#====================
# CHANGE COLUMN NAMES 
#====================

colnames(df.oil) <- c('rank', 'country', 'oil_bbl_per_day')



#=============================
# WRANGLE VARIABLES INTO SHAPE
#=============================


#----------------------------------
# COERCE 'rank' VARIABLE TO INTEGER
#----------------------------------

df.oil <- df.oil %>% mutate(rank = as.integer(rank)) 

df.oil %>% glimpse()



#---------------------------------------------------
# WRANGLE FROM CHARACTER TO NUMERIC: oil_bbl_per_day
#---------------------------------------------------

df.oil <- df.oil %>% mutate(oil_bbl_per_day = oil_bbl_per_day %>% str_replace_all(',','') %>% as.integer())


# inspect
df.oil %>% glimpse()


#===========================
#CREATE VARIABLE: 'opec_ind'
#===========================

df.oil <- df.oil %>% mutate(opec_ind = if_else(str_detect(country, 'OPEC'), 1, 0))


#=========================================================
# CLEAN UP 'country'
# - some country names are tagged as being OPEC countries
#   and this information is in the country name
# - we will strip this information out
#=========================================================

df.oil <- df.oil %>% mutate(country = country %>% str_replace(' \\(OPEC\\)', '') %>% str_replace('\\s{2,}',' '))


# inspect
df.oil %>% glimpse()


#------------------------------------------
# EXAMINE OPEC COUNTRIES
# - here, we'll just visually inspect
#   to make sure that the names are correct
#------------------------------------------

df.oil %>% 
  filter(opec_ind == 1) %>%
  select(country)



#==================
# REORDER VARIABLES
#==================

df.oil <- df.oil %>% select(rank, country, opec_ind, oil_bbl_per_day)

df.oil %>% glimpse()



#========
# GET MAP
#========

map.world <- map_data('world')

df.oil


#==========================
# CHECK FOR JOIN MISMATCHES
#==========================

anti_join(df.oil, map.world, by = c('country' = 'region'))


# rank                           country opec_ind oil_bbl_per_day
# 1   67 Congo, Democratic Republic of the        0          20,000
# 2   47               Trinidad and Tobago        0          60,090
# 3   34            Sudan and  South Sudan        0         255,000
# 4   30            Congo, Republic of the        0         308,363
# 5   20                    United Kingdom        0         939,760
# 6    3                     United States        0       8,875,817



#=====================
# RECODE COUNTRY NAMES
#=====================

map.world %>%
  group_by(region) %>%
  summarise() %>%
  print(n = Inf)


# UK
# USA
# Democratic Republic of the Congo
# Trinidad
# Sudan
# South Sudan


df.oil <- df.oil %>%  mutate(country = recode(country, `United States` = 'USA'
                                 , `United Kingdom` = 'UK'
                                 , `Congo, Democratic Republic of the` = 'Democratic Republic of the Congo'
                                 , `Trinidad and Tobago` = 'Trinidad'
                                 , `Sudan and South Sudan` = 'Sudan'
                                 #, `Sudan and  South Sudan` = 'South Sudan'
                                 , `Congo, Republic of the` = 'Republic of Congo'
                                 )
                   )



#-----------------------
# JOIN DATASETS TOGETHER
#-----------------------

map.oil <- left_join( map.world, df.oil, by = c('region' = 'country')) 



#=====
# PLOT
#=====

# BASIC (this is a first draft)

ggplot(map.oil, aes( x = long, y = lat, group = group )) +
  geom_polygon(aes(fill = oil_bbl_per_day))



#=======================
# FINAL, FORMATTED DRAFT
#=======================


df.oil %>% filter(oil_bbl_per_day > 822675) %>% summarise(mean(oil_bbl_per_day))
# 3190373

df.oil %>% filter(oil_bbl_per_day < 822675) %>% summarise(mean(oil_bbl_per_day))
# 96581.08



ggplot(map.oil, aes( x = long, y = lat, group = group )) +
  geom_polygon(aes(fill = oil_bbl_per_day)) +
  scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
                       ,values = scales::rescale(c(100,96581,822675,3190373,10000000))
                       ,labels = comma
                       ,breaks = c(100,96581,822675,3190373,10000000)
                       ) +
  guides(fill = guide_legend(reverse = T)) +
  labs(fill = 'bbl/day'
       ,title = 'Oil Production by Country'
       ,subtitle = 'Barrels per day, 2016'
       ,x = NULL
       ,y = NULL) +
  theme(text = element_text(family = 'Gill Sans', color = '#EEEEEE')
        ,plot.title = element_text(size = 28)
        ,plot.subtitle = element_text(size = 14)
        ,axis.ticks = element_blank()
        ,axis.text = element_blank()
        ,panel.grid = element_blank()
        ,panel.background = element_rect(fill = '#333333')
        ,plot.background = element_rect(fill = '#333333')
        ,legend.position = c(.18,.36)
        ,legend.background = element_blank()
        ,legend.key = element_blank()
        ) +
  annotate(geom = 'text'
           ,label = 'Source: U.S. Energy Information Administration\nhttps://en.wikipedia.org/wiki/List_of_countries_by_oil_production'
           ,x = 18, y = -55
           ,size = 3
           ,family = 'Gill Sans'
           ,color = '#CCCCCC'
           ,hjust = 'left'
           )
```

```{r}
ggplot(map.oil, aes( x = long, y = lat, group = group )) +
  geom_polygon(aes(fill = oil_bbl_per_day, color = as.factor(opec_ind))) +
  scale_fill_gradientn(colours = c('#461863','#404E88','#2A8A8C','#7FD157','#F9E53F')
                       ,values = scales::rescale(c(100,96581,822675,3190373,10000000))
                       ,labels = comma
                       ,breaks = c(100,96581,822675,3190373,10000000)
  ) +
  guides(fill = guide_legend(reverse = T)) +
  labs(fill = 'Barrels per d